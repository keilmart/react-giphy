{"version":3,"sources":["Services/firebase.js","components/SearchBar.js","components/Homepage.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","SearchBar","state","term","this","setState","props","onTermChange","className","onChange","event","onInputChange","target","value","React","Component","Header","sendResultsToParent","searchPlantsProp","div","whileHover","scale","whileTap","x","y","handleTermChange","onClick","Results","giphyMainArray","loading","axios","url","method","dataResponse","params","api_key","limit","offset","rating","then","giphyAxiosResponse","data","catch","error","console","log","Promise","reject","type","color","height","width","Container","fluid","map","giphysToRender","key","id","src","images","fixed_height","title","StopPosition","ShowAtPosition","EasingType","AnimationDuration","ContainerClassName","TransitionClassName","firestore","collection","add","time_seconds","App","displayResultsComponent","displayHomepage","displayResults","class","secondaryColor","Fragment","Homepage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.65b31f09.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport '@firebase/storage';\nimport '@firebase/firestore';\nimport \"firebase/database\";\n  \n  // Your web app's Firebase configuration\n  // For Firebase JS SDK v7.20.0 and later, measurementId is optional\n  // Your web app's Firebase configuration\n  \n  var firebaseConfig = {\n    apiKey: \"AIzaSyDiBkZqfQVr-348Rzm0BtdjnM8yVwlG_pw\",\n    authDomain: \"giphy-soapbox-app.firebaseapp.com\",\n    projectId: \"giphy-soapbox-app\",\n    storageBucket: \"giphy-soapbox-app.appspot.com\",\n    messagingSenderId: \"937904226826\",\n    appId: \"1:937904226826:web:c412c5d6a3eb3fddea55f3\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  \n  // const giphyStorage = firebase.storage();\n  // const giphyFirestore = firebase.firestore();\n\n  // export { giphyStorage, giphyFirestore };\n\n  export default firebase\n\n\n","import React from 'react';\n\nclass SearchBar extends React.Component {\n    constructor() {\n        super();\n        this.state = { term: '' }\n    }\n\n    onInputChange(term) {\n        this.setState({term});\n        this.props.onTermChange(term);\n    }\n\n    render() {\n        return (\n            <div className=\"search\">\n                <input onChange={event => this.onInputChange(event.target.value)} />\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;","import React, { Component } from \"react\";\nimport SearchBar from './SearchBar';\n// import { scroller } from \"react-scroll\";\nimport { motion } from \"framer-motion\";\nimport \"../Header.css\";\n\nclass Header extends Component {\n    \n    sendResultsToParent = () => {\n        this.props.searchPlantsProp();\n    }\n\n    render() {\n        return (\n            <header>\n                <motion.div\n                    whileHover={{ scale: 1.15 }}\n                    whileTap={{ scale: 0.9, x: \"-5px\", y: \"5px\" }}\n                    className=\"column widBox widgetOne shadowThree\"\n                >\n                    <div className=\"wrapper backer\">\n                        <h1>Todays Trending Giphys!</h1>\n                    </div>\n                </motion.div>\n                <SearchBar onTermChange={this.handleTermChange} />\n                <div className=\"CHANGETHIS\">\n                    <button className=\"findYourGighy\" onClick={this.sendResultsToParent}>Find your Giphy's!</button>\n                </div>\n                {/* <button\n                    onClick={(e) => scroller.scrollTo(\"Results\", {\n                        duration: 1200,\n                        smooth: true,\n                    })}\n                >\n                    Show Me The Gif's\n          </button> */}\n            </header >\n        );\n    }\n}\n\nexport default Header;\n\n\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Loader from 'react-loader-spinner'\nimport ScrollUpButton from \"react-scroll-up-button\";\nimport { motion } from \"framer-motion\";\nimport Container from 'react-bootstrap/Container';\nimport \"../Results.css\";\n\nclass Results extends Component {\n    constructor() {\n        super();\n        this.state = {\n            giphyMainArray: [],\n            loading: true,\n        };\n    }\n\n    async componentDidMount() {\n        await axios({\n            url: `https://api.giphy.com/v1/gifs/trending`,\n            method: `GET`,\n            dataResponse: `json`,\n            params: {\n                api_key: `P4hCy0QXgCWhBkBv1WS8E4upKd540JNg`,\n                limit: 20,\n                offset: 0,\n                rating: 'g',\n            },\n        })\n            // Get back the data and parse for what I want, I pass a callback function because thats a set of steps that we tell what to do // .data goes into the array //\n            .then((giphyAxiosResponse) => {\n                // this is saving the data into set state.App // this refers to the component that we are inside of // every time setState runs, it re renders the page // \n                this.setState({\n                    giphyMainArray: giphyAxiosResponse.data.data,\n                    loading: false,\n                });\n            }\n            ).catch(\n                function (error) {\n                    console.log('Show error notification!')\n                    return Promise.reject(error)\n                }\n            );\n    }\n\n    render() {\n        if (this.state.loading) {\n            return <div className=\"loadScreen\"><Loader\n                type=\"Puff\"\n                color=\"#ecbfea\"\n                height={100}\n                width={100}\n                // timeout={3000} //3 secs\n            /></div>;\n        }\n        return (\n            <div className=\"Results\">\n                <main>\n                    <Container fluid>\n                        <ul className=\"wrapper container\">\n                            {this.state.giphyMainArray.map((giphysToRender) => {\n                                return (\n                                    <motion.div\n                                        whileHover={{ scale: 1.15 }}\n                                        whileTap={{ scale: 0.9, x: \"-5px\", y: \"5px\" }}\n                                        className=\"column\"\n                                    >\n                                        <li div key={giphysToRender.id} className=\"giphysStyle\">\n                                            <div className=\"imgHold\">\n                                                <img src={giphysToRender.images.fixed_height.url} />\n                                            </div>\n                                            <h4>{giphysToRender.title}</h4>\n                                        </li>\n                                    </motion.div>\n                                );\n                            })}\n                        </ul>\n                    </Container>\n                    <ScrollUpButton\n                        StopPosition={0}\n                        ShowAtPosition={150}\n                        EasingType=\"easeOutCubic\"\n                        AnimationDuration={500}\n                        ContainerClassName=\"ScrollUpButton__Container\"\n                        TransitionClassName=\"ScrollUpButton__Toggled\"\n                    />\n                </main>\n            </div >\n        );\n    }\n}\n\nexport default Results;","import React, { Component } from \"react\";\nimport firebase from './Services/firebase.js'\nimport Loader from 'react-loader-spinner'\n// import { scroller } from \"react-scroll\";\nimport Homepage from \"./components/Homepage.js\";\nimport Results from \"./components/Results.js\";\n\nimport './App.css';\n\nfirebase.firestore().collection('times').add({\n  title: 'Rubiks Cube',\n  time_seconds: 45\n})\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            displayHomepage: true,\n            displayResults: false,\n            loading: false,\n        };\n    }\n\n    displayResultsComponent = () => {\n        this.setState({\n            displayHomepage: false,\n            displayResults: true,\n            loading: false,\n        });\n    }\n\n  render() {\n        if (this.state.loading) {\n      return (\n        <div class=\"loadScreen\">\n          <Loader\n            type=\"MutatingDots\"\n            color=\"#4f7cff\"\n            secondaryColor=\"#f35163\"\n            height={100}\n            width={100}\n          />\n        </div>\n      );\n    }\n  return (\n    <React.Fragment>\n      <div className='App'>\n        <Homepage/>\n        <Results/>\n      </div>\n    </React.Fragment>\n  );\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}