{"version":3,"sources":["assets/mainImage.png","components/Homepage.js","components/mainListItems.js","components/mainList.js","components/SearchBar.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","mainImage","alt","Component","GiphyListProp","gifImageInfo","gif","images","downsized_medium","url","name","title","slug","height","width","GiphyList","giphList","gifs","map","i","key","id","SearchBar","props","state","userSearch","this","setState","onChange","type","placeholder","value","event","handleSearchBarChange","target","React","Results","apiCallToGiphy","usersEnteredText","a","axios","then","res","data","error","alert","loading","_","debounce","class","color","secondaryColor","App","displayHomepageComponent","displayHomepage","displayResults","displayResultsComponent","Fragment","onClick","Homepage","homepageProps","resultsProps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b280fc62.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mainImage.fb94054c.png\";","import React, { Component } from \"react\";\nimport \"../App.css\";\nimport mainImage from '../assets/mainImage.png';\nclass Header extends Component {\n    \n    render() {\n        return (\n            <section>\n                <div className=\"homepageContainer\">\n                    <div className=\"mainImageContainer\">\n                        <img className=\"mainImage\" src={mainImage} alt=\"Logo\"/>\n                    </div>\n                    <div className=\"mainDescription\">\n                        <h1>Stay up to date to with trending Gif's.</h1>\n                        <span><p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Vero, repellendus? Hic, laboriosam ut. Odio eveniet quod</p></span>\n                        <span><p>sapiente, est deserunt, adipisci quaerat cupiditate vel veniam voluptates saepe quam cumque? Molestiae, libero.</p></span>\n                    </div>\n                </div>\n            </section>\n        );\n    }\n}\n\nexport default Header;\n\n\n","import React from 'react'\n\nconst GiphyListProp = ({gif}) => {\n  const gifImageInfo = gif.images.downsized_medium\n  // const gifImageTitle = gif.title\n  return (\n    <div>\n      <img src={gifImageInfo.url} name={gifImageInfo.title} alt={gifImageInfo.slug} height=\"250\" width=\"250\"></img>\n      {/* <h4>{gifImageInfo.title}</h4> */}\n    </div>\n  )\n}\n\nexport default GiphyListProp;\n\n","import React from 'react'\nimport GiphyListProp from './mainListItems.js'\n\nconst GiphyList = ({gifs}) => {\n  const giphList = gifs.map((gif, i) =>\n    <div key={i}>\n        <GiphyListProp gif={gif} key={gif.id} />\n    </div>\n  )\n\n  return (\n    <div className=\"flexContent\">\n      {giphList}\n    </div>\n  )\n}\n\nexport default GiphyList;\n\n\n\n\n\n// import React, { Component } from \"react\";\n// import GiphyListProp from './mainListItems.js'\n\n// class Results extends Component {\n\n//     constructor() {\n//         super();\n//         this.state = {\n//             giphyMainArray: [],\n//             // loading: true,\n//         };\n//     }\n    \n//     render() {\n//         // if (this.state.loading) {\n//         //     return <div className=\"loadScreen\"><Loader\n//         //         type=\"Puff\"\n//         //         color=\"#ecbfea\"\n//         //         height={100}\n//         //         width={100}\n//         //         // timeout={3000} //3 secs\n//         //     /></div>;\n//         // }\n\n//     return (\n//             <div className=\"flexContent\">\n//                         <ul className=\"wrapper container\">\n//                             {this.state.giphyMainArray.map((giphysToRender) => {\n//                                 return (\n//                                         <li key={giphysToRender.id} className=\"giphysStyle\">\n//                                             <div className=\"imgHold\">\n//                                                 <img src={giphysToRender.images.fixed_height.url} />\n//                                             </div>\n//                                             <h4>{giphysToRender.title}</h4>\n//                                         </li>\n//                                     // </motion.div>\n//                                 );\n//                             })}\n//                         </ul>\n\n//             </div >\n//         );\n//     }\n// }\n\n// export default Results;\n\n\n\n\n\n","import React from 'react'\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      userSearch: ''\n    }\n  }\n\n  handleSearchBarChange(userSearch) {\n    this.setState({ userSearch })\n    this.props.onChange(userSearch)\n  }\n\n  render() {\n    return (\n        <div className=\"flexContent\">\n          <h2>Enter a keyword to return your results</h2>\n          <div className=\"flexContent searchBar\">\n            <input\n              className=\"inputClass\"\n              type=\"text\"\n              placeholder=\"Enter your search...\"\n              value={this.state.userSearch}\n              onChange={(event) => this.handleSearchBarChange(event.target.value)}\n            />\n            </div>\n        </div>\n    )\n  }\n}\n\nexport default SearchBar","import React, { Component } from 'react';\nimport axios from \"axios\";\nimport GiphyList from './mainList.js'\nimport SearchBar from './SearchBar.js'\nimport Loader from \"react-loader-spinner\";\nimport _ from 'lodash'\nimport '../App.css';\n\nconst API_KEY = \"P4hCy0QXgCWhBkBv1WS8E4upKd540JNg\"\n\nclass Results extends Component {\n  constructor() {\n    super()\n    this.state = {\n      gifs: {},\n      loading: true,\n    }\n  }\n\n  // when the components mounts, it runs the \"apiCallToGiphy\" call/function to the API // \n  componentDidMount() {\n    this.apiCallToGiphy(\"computers\")\n  }\n\n  // this is the call to the API, it is async, so it awaits for the reply from the API // \n  apiCallToGiphy = async (usersEnteredText) => {\n    return await axios ({\n      url: `http://api.giphy.com/v1/gifs/search?q=${usersEnteredText}&api_key=${API_KEY}&limit=18`})\n    .then( res => res.data )\n    .then(data => {\n      if(data.error) {\n        alert(\"There was an error\")\n      } else {\n        this.setState({\n          gifs: data,\n          loading: false,\n        })\n      }\n    })\n  }\n\n  render() {\n    const apiCallToGiphy = _.debounce((usersEnteredText) => {this.apiCallToGiphy(usersEnteredText)}, 200)\n\n    // this is the loader for the gif section, should render a loading spinner and background //\n    if (this.state.loading) {\n      return (\n        <div class=\"flexContent loadScreen\">\n          <Loader\n            type=\"MutatingDots\"\n            color=\"#4f7cff\"\n            secondaryColor=\"#f35163\"\n            height={100}\n            width={100}\n          />\n        </div>\n      );\n    }\n\n    // this is checking for the received data from the state above, if\n    if(!this.state.gifs.data) {\n      return null\n    } else {\n\n      return (\n        <div>\n          <SearchBar onChange={(usersEnteredText) => apiCallToGiphy(usersEnteredText)} />\n            <GiphyList gifs={this.state.gifs.data}/>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Results;","import React, { Component } from \"react\";\nimport Homepage from \"./components/Homepage.js\";\nimport Results from \"./components/Results.js\";\n\nimport './App.css';\nclass App extends Component {\n  // Below are 2 functions for the \"Homepage\" and \"Results page\", Since the header is \"static\" it will navigate to the page based on the users input, in this case picking either the home button or the button for the results //\n    constructor() {\n        super();\n        this.state = {\n            displayHomepage: true,\n            displayResults: false,\n            loading: false,\n        };\n    }\n\n    displayHomepageComponent = () => {\n        this.setState({\n            displayHomepage: true,\n            displayResults: false,\n            loading: false,\n        });\n    }\n\n    displayResultsComponent = () => {\n        this.setState({\n            displayHomepage: false,\n            displayResults: true,\n            loading: false,\n        });\n    }\n\n  render() {\n  return (\n    <React.Fragment>\n      <header>\n        <div className=\"wrapper\">\n          <div className=\"flexContent buttonContainer\">\n            <button className=\"inputClass\" onClick={this.displayHomepageComponent}>&#x2190; giphy &#x2192;</button>\n            <button className=\"inputClass\" onClick={this.displayResultsComponent}>Launch App &#x2192;</button>\n          </div>\n        </div>\n      </header >\n      <main>\n        {this.state.displayHomepage ? <Homepage homepageProps={this.displayHomepage} /> : null}\n        {this.state.displayResults ? <Results resultsProps={this.state.displayResults} /> : null}\n      </main>\n    </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}